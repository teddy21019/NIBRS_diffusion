import pandas as pd
from typing import Callable, Iterator
from pathlib import Path

def get_code_dict_BH(dict_tab_file:str)->list[tuple[str,int,int]]:
    code_dict = pd.read_csv(dict_tab_file, sep='\t')
    return list(
        zip(
            code_dict['Name'],
            code_dict['Start'],
            code_dict['Len'],
        )
    )

def try_int(s):
    try:
        return int(s)
    except:
        return s

def BH_converter(BH_raw_list:Iterator[str], code_dict = list[tuple[str,int,int]]) -> pd.DataFrame:
    """
    converts list (or iterator) of batch header lines into a pandas DataFrame, based on a code_dict.

    code dict should be generated by `get_code_dict_BH` function.
    """
    lines = ( {n:try_int(BH_string[s-1: s+l-1]) for n, s,l in code_dict} for BH_string in BH_raw_list)
    return pd.DataFrame(lines)

def three_segment_BH_handler(file:Path) -> pd.DataFrame:

    BH_dfs:dict[int, pd.DataFrame] = {}
    codes = [get_code_dict_BH(f"./CodeBook/dict_{i}.tsv") for i in range(1,4)]
    BH_types = ["B1", "B2", "B3"]

    for i in range(3):
        with open(file, 'r', encoding="latin-1") as f:
            # Use a generator to yield only the lines that start with the desired substring
            matching_lines = (line.replace("\x00", " ").rstrip("\n") for line in f if line.startswith(BH_types[i]))
            # You can iterate over matching_lines or process them as needed
            codebook = codes[i]
            BH_dfs[i] = BH_converter(matching_lines, codebook)
    return_df = BH_dfs[0].merge(BH_dfs[1], on="ORI", suffixes=("","_x")).merge(BH_dfs[2], on="ORI", suffixes=("", "_x"))
    return_df.drop(return_df.filter(regex='_x$').columns, axis=1, inplace=True)

    return return_df

def one_segment_BH_handler(file:Path) -> pd.DataFrame:

    with open(file, 'r', encoding='latin-1') as f:
        matching_lines = (line.replace("\x00", " ").rstrip("\n") for line in f if line.startswith("BH"))
        codebook = get_code_dict_BH("./CodeBook/dict_BH.tsv")
        return BH_converter(matching_lines, codebook)

def converter_factory(year:int) -> Callable[[Path], pd.DataFrame]:
    if year <= 2012:
        return three_segment_BH_handler
    else:
        return one_segment_BH_handler